require "highline/system_extensions.rb";C, R=HighLine::SystemExtensions.terminal_size;L,D,O='◼','◻',false;def x(s,r,q);q=q.map {|o| if r>=o.count;(r-o.count)%2!=0 ? add_on=[0] : '';o=Array.new((r-o.count)/2).map{0}<<o<<Array.new((r-o.count)/2).map{0};o<<add_on if add_on;o.flatten!;else;(o.count-r) % 2 != 0 ? o.pop : '';((o.count-r)/2).times{o.pop; o.shift}; o;end};if s >= q.count;(s-q.count) % 2 != 0 ? n=Array.new(r).map{0} : '';m=[];array=Array.new((s-q.count)/2){ Array.new(r).map{0} };array.each {|r| m<<r };q.each {|o| m<<o };array=Array.new((s-q.count)/2){ Array.new(r).map{0} };array.each{|o| m<<o};m<<n if n;m;else;(q.count-s) % 2 != 0 ? q.pop : '';((q.count-s)/2).times{q.pop;q.shift};q;end;end;def w (o,l,m);c, d=m[0].count, m.count;a=0;a += 1 if [1,2].include? m[o-1][l-1];a += 1 if [1,2].include? m[o-1][l  ];a += 1 if [1,2].include? m[o-1][(l+1) % c];a += 1 if [1,2].include? m[o  ][l-1];a += 1 if [1,2].include? m[o  ][(l+1) % c];a += 1 if [1,2].include? m[(o+1) % d][l-1];a += 1 if [1,2].include? m[(o+1) % d][l  ];a += 1 if [1,2].include? m[(o+1) % d][(l+1) % c];b=m[o][l];a<2 || a>3 ? m[o][l]=2 : '' if b == 1;m[o][l]=3 if b == 0 && a == 3;end;def v(m);m.each_with_index{|o,k|o.each_with_index{|l,j|O ? w(k,j,m) : (w(k,j,m) unless [j,k].include?(0))}};end;def u(m);m.each_with_index{|o,k|o.each_with_index{|l,j|m[k][j]=m[k][j] == 1 || m[k][j] == 3 ? 1 : 0}};end;def t(m);i=(Array.new<<m)[0];m=x(R-8,C,m);h=Time.new;g=true;f=0;e=rand(1..10);d=(Array.new<<m).flatten;c=0;while g;if Time.new - h>0.1;f += 1;m, f, c=i, 1, 0 if m.flatten == d;d=(Array.new<<m).flatten;e=rand(1..10) if f % e == 0;b,os=HighLine::SystemExtensions.terminal_size;m=x(os-8,b,m);puts "\e[H\e[2J";(0...m.count).each {|o| puts m[o].map{|i| i == 0 ? i=D : i.nil? ? i=D : i=L}.join+"\n"};a=m.flatten.compact.inject(:+);c=a if a>c;puts;puts"Gen: #{f}\n\nPop: #{a}\n\nMax Pop: #{c}";v(m);u(m);h=Time.new;end;end;end;t [[0,0,1,1,0],[0,1,1,0,0],[0,0,1,0,0]]
