#!/usr/bin/env ruby
#
# j - Journal Helper (in Ruby!)
#
# Usage:
#
#     j "Here is a journal entry for the day..."
#
# The journal entry is appended to the day's journal file, which is created if
# it is absent. In the absence of a journal entry, the day's journal file will
# be created if necessary and opened for free editing.
#
# I'm grateful for...
# Today, this went well...
# I wish this had gone better...
# I am...
#
require 'time'

DROPBOX_DIR = File.join(Dir.home, 'Dropbox', 'Journal').freeze

if ARGV.count == 1 && %w(-s --scripture).include?(ARGV.first)
  JOURNAL_DIR = File.join(Dir.home, 'Documents', 'Church', 'StudyNotes').freeze
else
  JOURNAL_DIR = File.join(Dir.home, 'Documents', 'Journal').freeze
end

DATE = Time.now.strftime('%Y_%m_%d').freeze
ENTRY_FILE = File.join(JOURNAL_DIR, "#{DATE}.md")

# If the dropbox dir doesn't exist, create it
Dir.mkdir(DROPBOX_DIR) unless File.directory?(DROPBOX_DIR)

# If the journal dir doesn't exist create it
Dir.mkdir(JOURNAL_DIR) unless File.directory?(JOURNAL_DIR)

# If the entry file doesn't exist, create it
unless File.file?(ENTRY_FILE)
  File.write(ENTRY_FILE, Time.now.strftime('# %d %B %Y, %A%n'))
end

if ARGV.count == 0
  # If given no arguments, open nvim at the end of the file
  system(%(nvim "+normal G$" #{ENTRY_FILE}))
elsif %w(-m --manual -s --scripture).include? ARGV.first
  # Manual: Create a new entry, and fill it in with nvim manually
  File.open(ENTRY_FILE, 'a') do |f|
    f.puts ''
    f.puts Time.now.strftime('### %r%n%n%n')
  end
  system(%(nvim "+normal G$" #{ENTRY_FILE}))
elsif %w(-a --append).include? ARGV.first
  # Append: Create a new entry using the second argument as the entry
  if ARGV[1].nil?
    raise ArgumentError, <<-MSG
      Missing entry argument
      Usage: `j --append entry' or `j -a entry' or `j entry'
    MSG
  else
    File.open(ENTRY_FILE, 'a') do |f|
      f.puts ''
      f.puts Time.now.strftime('### %r%n%n')
      f.puts ARGV[1]
    end
  end
elsif %w(-h --help).include? ARGV.first
  # Help: Show the help dialog
  puts <<-MSG
    j - Journal Helper

    Usage:
      `j'
        Open the file at the very end
      `j --manual' or `j -m'
        Create a new entry, and fill it in with nvim manually
      `j --append <entry>' or `j -a <entry>' or `j <entry>'
        Create a new entry using <entry> as the entry
      `j --help' or `j -h'
        Show this dialog
  MSG
elsif '--dropbox' == ARGV.first
  Dir[File.join(DROPBOX_DIR, '*.txt')].each do |path|
    entry = File.read(path)
    timestamp = File.mtime(path)

    date = timestamp.strftime('%Y_%m_%d').freeze
    journal_entry = File.join(JOURNAL_DIR, "#{date}.md")

    entry_text = "#{timestamp.strftime('%r')}\n\n#{entry}\n"

    if File.file? journal_entry
      current_text = File.read(journal_entry)
      entries = current_text.split("\n### ")
      new_text = current_text
      if entries.count == 1
        new_text = "#{current_text}\n### #{entry_text}"
      else
        times = entries[1..-1].map { |e| Time.parse(e.split("\n\n").first) }
        my_time = Time.parse(timestamp.strftime('%r'))
        if !times.include?(my_time)
          index = times.count { |t| my_time > t }
          new_entries = entries[0..index] + [entry_text] + entries[index+1..-1]
          new_text = new_entries.join("\n### ")
        end
      end
      File.write(journal_entry, new_text)
    else
      # Probably won't happen as often, since this means the entry wasn't
      # written today and this script hasn't been run since then.
      File.open(journal_entry, 'w') do |f|
        f.puts timestamp.strftime('# %d %B %Y, %A')
        f.puts ''
        f.puts timestamp.strftime('### %r%n%n')
        f.puts entry
      end
    end

    File.delete(path)
  end
else
  # If the first arg doesn't match any options, assume it's an entry
  File.open(ENTRY_FILE, 'a') do |f|
    f.puts ''
    f.puts Time.now.strftime('### %r%n%n')
    f.puts ARGV.first
  end
end
